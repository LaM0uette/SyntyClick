//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/PlayerController/GeneralPlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GeneralPlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GeneralPlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GeneralPlayerInputs"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""780ce967-c726-4d6b-8d09-5e026d99209d"",
            ""actions"": [
                {
                    ""name"": ""ClickAction"",
                    ""type"": ""Button"",
                    ""id"": ""ca84aa35-12cb-450a-a1f6-4a70a1bdcf42"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PdgClickAction"",
                    ""type"": ""Button"",
                    ""id"": ""d3234a3d-ce3d-4131-85f6-af0ad3628e65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DevEarnMoney"",
                    ""type"": ""Button"",
                    ""id"": ""6846be29-afe2-4043-a66b-a9b7e64f45d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""6cd65d88-a39f-47ce-a9f6-be53c485f372"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3150ef2e-3450-46a5-b1bd-1760d8c8bcd1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ClickAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e7b2c5c-c93b-4806-a2b9-c0eaa1057a39"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""PdgClickAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b5045f2-c8af-4945-8b47-f35bfe797912"",
                    ""path"": ""<Keyboard>/semicolon"",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""DevEarnMoney"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c73dc0f3-f840-4f8f-84f1-73afb50c7ff8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_ClickAction = m_PlayerActions.FindAction("ClickAction", throwIfNotFound: true);
        m_PlayerActions_PdgClickAction = m_PlayerActions.FindAction("PdgClickAction", throwIfNotFound: true);
        m_PlayerActions_DevEarnMoney = m_PlayerActions.FindAction("DevEarnMoney", throwIfNotFound: true);
        m_PlayerActions_Menu = m_PlayerActions.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
    private readonly InputAction m_PlayerActions_ClickAction;
    private readonly InputAction m_PlayerActions_PdgClickAction;
    private readonly InputAction m_PlayerActions_DevEarnMoney;
    private readonly InputAction m_PlayerActions_Menu;
    public struct PlayerActionsActions
    {
        private @GeneralPlayerInputs m_Wrapper;
        public PlayerActionsActions(@GeneralPlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClickAction => m_Wrapper.m_PlayerActions_ClickAction;
        public InputAction @PdgClickAction => m_Wrapper.m_PlayerActions_PdgClickAction;
        public InputAction @DevEarnMoney => m_Wrapper.m_PlayerActions_DevEarnMoney;
        public InputAction @Menu => m_Wrapper.m_PlayerActions_Menu;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
            @ClickAction.started += instance.OnClickAction;
            @ClickAction.performed += instance.OnClickAction;
            @ClickAction.canceled += instance.OnClickAction;
            @PdgClickAction.started += instance.OnPdgClickAction;
            @PdgClickAction.performed += instance.OnPdgClickAction;
            @PdgClickAction.canceled += instance.OnPdgClickAction;
            @DevEarnMoney.started += instance.OnDevEarnMoney;
            @DevEarnMoney.performed += instance.OnDevEarnMoney;
            @DevEarnMoney.canceled += instance.OnDevEarnMoney;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IPlayerActionsActions instance)
        {
            @ClickAction.started -= instance.OnClickAction;
            @ClickAction.performed -= instance.OnClickAction;
            @ClickAction.canceled -= instance.OnClickAction;
            @PdgClickAction.started -= instance.OnPdgClickAction;
            @PdgClickAction.performed -= instance.OnPdgClickAction;
            @PdgClickAction.canceled -= instance.OnPdgClickAction;
            @DevEarnMoney.started -= instance.OnDevEarnMoney;
            @DevEarnMoney.performed -= instance.OnDevEarnMoney;
            @DevEarnMoney.canceled -= instance.OnDevEarnMoney;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActionsActions
    {
        void OnClickAction(InputAction.CallbackContext context);
        void OnPdgClickAction(InputAction.CallbackContext context);
        void OnDevEarnMoney(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
